`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/10/2022 03:22:08 PM
// Design Name: 
// Module Name: adder
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module adder(
    input[2:0] A,
    input[2:0] B,
    input en,
    input Cin,
    output reg Co,
    output reg [2:0] D
    );
    initial begin
    Co = 0;
    D = 0;
    end
  always@(*)
  begin
    if(en)
    begin
       {Co, D} = A+B+Cin;
    end
    else
       {Co,D} = 0;
  end
endmodule



`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/10/2022 03:22:08 PM
// Design Name: 
// Module Name: adder_testbench
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module adder_testbench();
reg [2:0] A;
reg [2:0] B;
reg cin;
reg enable;
wire cout;
wire [2:0] Dout;

adder dut(
.A(A),
.B(B),
.en(enable),
.Cin(cin),
.Co(cout),
.D(Dout)
);

initial begin
A = 3'b001;
B = 3'b001;
cin = 0;
enable =1;

#80 cin = 1;
#80 A = 3'b100;
#80 B = 3'b100; 
end
endmodule
