`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/18/2022 02:03:32 PM
// Design Name: 
// Module Name: onehr Lab8
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module onehr(input sclk, input rA, output[6:0]CA, output [7:0] AN);
wire outsignal, secsig, minsig, un;
wire [1:0] Qp;
wire [5:0] Qs, Qm;
slowerClkGen clking(sclk, rA, outsignal, secsig);
upcounter counting(outsignal, Qp);
upcounterBCD sec(secsig, Qs,minsig);
upcounterBCD min(minsig, Qm, un);
muxdisplay display(Qp,Qs,Qm, CA, AN);
endmodule




module muxdisplay(input [1:0]counterAN,[5:0]counterCAs, counterCAm, output [6:0]CA, reg [7:0] AN);
reg [3:0] num;
always@(*)
begin
    case(counterAN)
    2'b00: 
    begin
        AN = 8'b1111_1110;
        num = counterCAs%10;
    end
    2'b01: 
    begin
        AN = 8'b1111_1101;
        num = counterCAs/10;
    end
    2'b10: 
    begin
        AN = 8'b1111_1011;
        num = counterCAm%10;
    end
    2'b11: 
    begin
        AN = 8'b1111_0111;
        num = counterCAm/10;
    end
    endcase    
end    
segment7_control CAcontrol(num, CA);
endmodule

module segment7_control(input[3:0]num, output reg [6:0]C);
    always@(num)
    begin
        case(num)
            0: C = 1;
            1: C = 7'b1001111; 
            2: C = 7'b0010010;
            3: C = 7'b0000110;
            4: C = 7'b1001100;
            5: C = 7'b0100100;
            6: C = 7'b0100000;
            7: C = 7'b0001111;
            8: C = 0;
            9: C = 7'b0001100;
        endcase
    end
endmodule

module upcounterBCD(input Clock, output [5:0] Qa, output msig);
reg [5:0] Qa = 0;
reg [5:0] counter = 50; 
reg msig = 0;
always @(posedge Clock)
begin       
    Qa = 50 - counter; //counter = 60, Q = 0; counter = 1, Q = 59
    counter = counter -1;//counter = 59; counter = 1-1 = 0
    msig = 0;
    if(counter == 0)//counter = 0,
    begin
        counter = 50;//counter = 60
        msig = 1;
    end
end

endmodule

module upcounter (input Clock, output[1:0] Qc); //to output a 2 bits selector
reg [1:0] Qc = 0;
always @(posedge Clock) //Q = 0 when reset is 0.
begin
    
        Qc <= Qc + 1;//Q = 0~3
end
endmodule

module slowerClkGen(input clk, resetA, output outsignal, type);
reg [17:0] counter = 0;
reg [26:0] counter2 = 0;  
reg outsignal = 0;
reg type = 0;

    always @ (posedge clk) //synchronous reset, clk = 0 when reset is 0.
    begin
       if (resetA)
        begin
            counter=0;
            outsignal=0;
        end
        else
        begin
            counter = counter +1; //every positive edge of clock would +1
            counter2 = counter2 +1;
            if (counter == 12) //every 1s toggle, -+- is a wave, toggle twice, so T = 2.5ms, f = 400Hz
            begin
                outsignal=~outsignal;
                counter =0;
            end
            if (counter2 == 30) //every 1s toggle, -+- is a wave, toggle twice, so T = 1s, f = 1Hz
            begin
                counter2 =0;
                type = ~type;
            end
            
         end
    end
endmodule


module onehr_test;
reg sysclk, resA;
//wire ANclk, seclk, minclk, unuse;
//wire [1:0] select;
//wire [5:0] sec, min;
wire[7:0]ANy;
wire[6:0]CAx;
onehr uut(sysclk, resA, CAx, ANy);
//slowerClkGen uut(, ANclk, seclk);
//upcounter countt(ANclk, select);
//upcounterBCD secc(seclk, sec, minclk);
//upcounterBCD minn(minclk, min, unuse);
//muxdisplay displayy(select,sec,min, CA, AN);

always@(*)
begin
    repeat(1200)#1 sysclk = ~sysclk;
end

initial begin
    sysclk = 0; resA = 0;
end
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/11/2022 01:44:18 PM
// Design Name: Lab7 
// Module Name: vision
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module vision(input sclk, input rA, output[6:0]CA, output [7:0] AN);
wire outsignal;
wire [1:0] Qp;
slowerClkGen clking(sclk, rA, outsignal, type);
upcounter counting(outsignal, Qp);
muxdisplay display(type, Qp, CA, AN);
endmodule

module muxdisplay(input switch,[1:0] counter, output reg[6:0]CA, reg [7:0] AN);

always@(*)
begin
    case(counter)
    2'b00: 
    begin
        AN = 8'b1111_1110;
        CA = switch?7'b100_1111:7'b000_1000;
    end
    2'b01: 
    begin
        AN = 8'b1111_1101;
        CA = switch?7'b001_0010:7'b110_0000;
    end
    2'b10: 
    begin
        AN = 8'b1111_1011;
        CA = switch?7'b000_0110:7'b011_0001;
    end
    2'b11: 
    begin
        AN = 8'b1111_0111;
        CA = switch?7'b100_1100:7'b100_0010;
    end
    endcase    
end    
endmodule


module upcounter (input Clock, output reg [1:0] Q);
reg[1:0] Q = 0;
reg switch;
always @(posedge Clock) //Q = 0 when reset is 0.
begin
    
        Q <= Q + 1;//Q = 0~3
end
endmodule


module slowerClkGen(input clk, resetA, output outsignal, type);
reg [17:0] counter = 0;
reg [26:0] counter2 = 0;  
reg outsignal = 0;
reg type;
initial begin
type = 1;
end
    always @ (posedge clk) //synchronous reset, clk = 0 when reset is 0.
    begin
       if (resetA)
        begin
            counter=0;
            outsignal=0;
        end
        else
        begin
            counter = counter +1; //every positive edge of clock would +1
            counter2 = counter2 +1;
            if (counter == 125_000) //every 1s toggle, -+- is a wave, toggle twice, so T = 2.5ms, f = 400Hz
            begin
                outsignal=~outsignal;
                counter =0;
            end
            if (counter2 == 50_000_000) //every 1s toggle, -+- is a wave, toggle twice, so T = 2s, f = 0.5Hz
            begin
                outsignal=~outsignal;
                counter2 =0;
                type = ~type;
            end
            
         end
    end
endmodule



module vision_test;
reg sclk, rA;
//wire outsignal, tp;
//wire[1:0]Q1;
wire [6:0] CA1;
wire [7:0] AN1;
//slowerClkGen clking(sclk, rA, outsignal, tp);
//upcounter counting(sclk, Q1);
//muxdisplay dis(tp, Q1, CA1, AN1);

vision uut(sclk, rA, CA1, AN1);

always@(*)
begin
    repeat(50) #1 sclk = ~sclk;
end

initial begin
rA = 1; sclk = 0;
#1 rA = ~rA;

end

endmodule






`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Create Date: 09/27/2022 01:43:37 PM
// Design Name: 
// Module Name: top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module top(input co, input[3:0]X, Y, output [6:0]C, output [7:0]AN); //The top output can't be reg.
wire cout;
wire [3:0]summ;
    addern add(co, X, Y, cout, summ);
    segD Display(summ, C, AN);
endmodule

module addern(input co, input [3:0]X, Y, output reg carr, output reg [3:0]S);
reg [3:0 ]temy;
    always@(*)
    begin 
        temy = co?(~Y+co):Y;
        {carr,S} = X+temy;
    end
endmodule

module segD(input [3:0] S, output reg[6:0]c, output [7:0]an);
    assign an = 8'b11111110;
    always@(S)
    begin
        case(S)
           0: c = 7'b0000001;
           1: c = 7'b1001111; 
           2: c = 7'b0010010;
           3: c = 7'b0000110;
           4: c = 7'b1001100;
           5: c = 7'b0100100;
           6: c = 7'b0100000;
           7: c = 7'b0001111;
           8: c = 0;
           9: c = ~(7'b1111011);
           10: c = ~(7'b1110111);
           11: c = ~(7'b0011111);
           12: c = ~(7'b1001110);
           13: c = ~(7'b0111101);
           14: c = ~(7'b0111101);
           15: c = 7'b0111000;
           default: c = 7'b1111111;
         endcase
    end
endmodule



module top_testb;
reg [3:0] x, y;
reg contrl;
wire [6:0] can;
wire [7:0] ann;
top uut(contrl, x, y, can, ann );
initial begin
    x = 4'b0001; contrl = 1; y = 4'b0001;
    #1 contrl = 0;
end
endmodule






`timescale 1ns / 1ps
////////////////////////////////////////
//The lab4 at 9/20
//to interpret the decoder, it is not by "value" but indexing out like num[2] = 1, num[3] = 1 would be 8 instead of 3.
//////////////////////////////////////////
module lab4(input[2:0] switch, output AN, output[6:0]C);
    wire[7:0] y;
    decoder u1(switch, y);
    segment7_control u2(y, AN, C);
endmodule


module decoder(input [2:0] data, output reg [7:0] y);
    always @data
    begin
        y=0;
        y[data] = 1;
    end
endmodule

module segment7_control(input[7:0]num, output AN,output reg [6:0] C  );
    assign AN = 1;
    always@(num)
    begin
        case(num)
            8'b00000001: C = 1;
            8'b00000010: C = 7'b1001111; 
            8'b00000100: C = 7'b0010010;
            8'b00001000: C = 7'b0000110;
            8'b00010000: C = 7'b1001100;
            8'b00100000: C = 7'b0100100;
            8'b01000000: C = 7'b0100000;
            8'b10000000: C = 7'b0001111;
        endcase
    end
    
//////////////////////////////////////////////////////////////////////////////////


module top_testbench;
reg[2:0] s;
wire[6:0]ssegd;
wire on;
lab4 uut(s, on, ssegd);
initial begin
s = 2;
    #1 s = 1;
    #1 s = 0;
end
endmodule

    
